# Let the programmer choose 32 or 64 bits, but default to 32
BITS ?= 64

# Directory names
ODIR := ./obj$(BITS)
output_folder := $(shell mkdir -p $(ODIR))

# the TM library to use.  This is also the suffix of the executable
#
# NB: the second of these will never fire... it's just for documentation

# Names of files that the compiler generates
EXEFILES  = $(patsubst %, $(ODIR)/%_$(TMLIBNAME), $(TARGETS))
OFILES    = $(patsubst %, $(ODIR)/%.o, $(CXXFILES))
EXEOFILES = $(patsubst %, $(ODIR)/%.o, $(TARGETS))
DEPS      = $(patsubst %, $(ODIR)/%.d, $(CXXFILES) $(TARGETS))

# The name of the compiler pass
CCPASSSOFILE  = ../plugin/build/libtmplugin.so

# Configure the compiler
CXX = clang++-6.0
CXXFLAGS += -MMD -O3 -m$(BITS) -std=c++11 -Wall -Werror -fPIC
LD = g++
LDFLAGS += -m$(BITS) -pthread

# Set up the flags for the compiler plugin, so we can invoke it from clang++
PLUGINFLAGS = -Xclang -load -Xclang $(CCPASSSOFILE)

# Build 'all' by default, and don't clobber intermediate files
.DEFAULT_GOAL ?= all
.PRECIOUS: $(OFILES) $(EXEOFILES)
.PHONY: all clean

# Goal is to build all executables
all: $(EXEFILES)

# Rules for building object files
$(ODIR)/%.o: %.cc
	@echo "[CXX] $< --> $@"
	@$(CXX) $(PLUGINFLAGS) $< -o $@ -c $(CXXFLAGS)

# Rules for building executables... we assume an executable uses *all* of the 
# OFILES
$(ODIR)/%_$(TMLIBNAME): ../libs/$(ODIR)/$(TMLIBNAME).o
$(ODIR)/%_$(TMLIBNAME): $(ODIR)/%.o $(OFILES)
	@echo "[LD] $^ --> $@"
	@$(LD) $(LDFLAGS) $^ ../libs/$(ODIR)/$(TMLIBNAME).o -o $@

# clean by clobbering the build folder
clean:
	@echo Cleaning up...
	@rm -rf $(ODIR)

# Include any dependencies we generated previously
-include $(DEPS)
